diff --git a/src/Commands/ContentSyncCommands.php b/src/Commands/ContentSyncCommands.php
index f8ca072..a0a1aa5 100644
--- a/src/Commands/ContentSyncCommands.php
+++ b/src/Commands/ContentSyncCommands.php
@@ -120,7 +120,7 @@ class ContentSyncCommands extends DrushCommands {
    *    A comma separated string of entity id's to be exported.
    *    Combine with param $entityType in order to target the correct entities.
    *    if $all-content is used, it will take priority over this option.
-   *
+  * @option $override Override file on generation.
    * @usage content:export node /relative/output/path --entities="1,4,17" --translate --assets --all-content --dry-run
    */
   public function exportEntitiesCommand(string $entityType = 'node', string $outputPath = '', array $options = [
@@ -136,8 +136,21 @@ class ContentSyncCommands extends DrushCommands {
       'all-content' => $all_allowed_content,
       'dry-run' => $is_dry_run,
       'entities' => $entity_ids_to_export,
+      'override' => $override,
     ] = $options;
-    $output_dir = $this->commandHelper->getRealDirectory($outputPath);
+
+    $validExtensions = ['yml', 'zip'];
+    $extension = pathinfo($outputPath, PATHINFO_EXTENSION);
+    if ($extension && in_array($extension, $validExtensions)) {
+      $file_name = pathinfo($outputPath, PATHINFO_FILENAME) . '.' . $extension;
+      $directory = pathinfo($outputPath, PATHINFO_DIRNAME);
+    } else {
+      $file_name = sprintf('content-bulk-export-%s.zip', date('d_m_Y-H_i')) ;
+      $extension = 'zip';
+      $directory = $outputPath;
+    }
+
+    $output_dir = $this->commandHelper->getRealDirectory($directory);
 
     // Create message to inform user how they are running the command.
     $message = $this->commandHelper->createMessageWithFlags("\nExecuting drush content:export {$entityType} {$outputPath}", $options);
@@ -171,10 +184,10 @@ class ContentSyncCommands extends DrushCommands {
     // else, generate Zip file.
     $file = count($entities) === 1 && !$include_assets
       ? $this->fileGenerator->generateYamlFile(reset($entities), $include_translations)
-      : $this->fileGenerator->generateBulkZipFile($entities, $include_translations, $include_assets);
+      : $this->fileGenerator->generateBulkZipFile($entities, $include_translations, $include_assets, $file_name);
 
     $this->contentSyncHelper->prepareFilesDirectory($output_dir);
-    $file_target = $this->commandHelper->moveFile($file, $output_dir, explode('://', $file->getFileUri(), 2)[1]);
+    $file_target = $this->commandHelper->moveFile($file, $output_dir, explode('://', $file->getFileUri(), 2)[1], $override);
 
     $this->messenger->addStatus($this->t('Successfully exported the content. You can find the exported file at the following location: @path', [
       '@path' => $file_target,
diff --git a/src/ContentFileGenerator.php b/src/ContentFileGenerator.php
index b746bb3..deedbd7 100644
--- a/src/ContentFileGenerator.php
+++ b/src/ContentFileGenerator.php
@@ -98,9 +98,7 @@ class ContentFileGenerator implements ContentFileGeneratorInterface {
   /**
    * {@inheritdoc}
    */
-  public function generateBulkZipFile(array $entities, bool $extract_translations = FALSE, bool $extract_assets = FALSE): FileInterface {
-    // Generate an empty zip file to be used for storing the exported content.
-    $zip_name = sprintf('content-bulk-export-%s', date('d_m_Y-H_i'));
+  public function generateBulkZipFile(array $entities, bool $extract_translations = FALSE, bool $extract_assets = FALSE, $zip_name = NULL): FileInterface {
     $zip_file = $this->generateEmptyZipFile($zip_name);
 
     $zip_file_path = $this->fileSystem->realpath($zip_file->getFileUri());
@@ -136,8 +134,9 @@ class ContentFileGenerator implements ContentFileGeneratorInterface {
   protected function generateEmptyZipFile(string $name): FileInterface {
     $directory = "temporary://export/zip";
     $this->contentSyncHelper->prepareFilesDirectory($directory);
+    $name = str_ends_with($name, '.zip') ? $name : "{$name}.zip";
 
-    return $this->contentSyncHelper->saveFileContentTemporary('', "{$directory}/{$name}.zip");
+    return $this->contentSyncHelper->saveFileContentTemporary('', "{$directory}/{$name}");
   }
 
   /**
diff --git a/src/Utility/CommandHelper.php b/src/Utility/CommandHelper.php
index 6505a20..cf7f001 100644
--- a/src/Utility/CommandHelper.php
+++ b/src/Utility/CommandHelper.php
@@ -167,14 +167,14 @@ class CommandHelper implements CommandHelperInterface {
   /**
    * {@inheritDoc}
    */
-  public function moveFile(FileInterface $file, string $output_dir, string $file_target): string {
+  public function moveFile(FileInterface $file, string $output_dir, string $file_target, bool $override = FALSE): string {
     if (!$output_dir) {
       return $file_target;
     }
 
     $target_base_name = basename($file_target);
     $moved_file_path = "{$output_dir}/{$target_base_name}";
-    $this->fileSystem->move($file->getFileUri(), $moved_file_path);
+    $this->fileSystem->move($file->getFileUri(), $moved_file_path, $override ? FileSystemInterface::EXISTS_REPLACE : FileSystemInterface::EXISTS_RENAME);
 
     return $moved_file_path;
   }
